#!/bin/bash

# creator by shencangsheng

source ./tools

function mirror_docker_install() {
  docker compose up -d

  local content=$(
    cat <<EOF

Configure /etc/docker/daemon.json on the application server, Then restart docker

vim /etc/docker/daemon.json

==============================================
{
${_GREEN}
  "registry-mirrors": ["http://xx.xx.xx.xx:5000"],
  "insecure-registries": [
    "xx.xx.xx.xx:5000"
  ]
${_NC}
}
===============================================

systemctl daemon-reload
systemctl restart docker

## Trying

docker pull xx.xx.xx.xx:5000/busybox:latest
docker pull busybox:latest

EOF
  )
  echo -e "$content"
}

function mirror_docker_uninstall() {
  docker compose down

  local content=$(
    cat <<EOF

Configure /etc/docker/daemon.json on the application server, Then restart docker

vim /etc/docker/daemon.json

==============================================
{
${_RED}
  "registry-mirrors": ["http://xx.xx.xx.xx:5000"],
  "insecure-registries": [
    "xx.xx.xx.xx:5000"
  ]
${_NC}
}
===============================================

systemctl daemon-reload
systemctl restart docker

EOF
  )
  echo -e "$content"
}

function mirror_docker_join() {
  local content=$(
    cat <<EOF

Configure /etc/docker/daemon.json on the application server, Then restart docker

vim /etc/docker/daemon.json

==============================================
{
${_GREEN}
  "registry-mirrors": ["http://xx.xx.xx.xx:5000"],
  "insecure-registries": [
    "xx.xx.xx.xx:5000"
  ]
${_NC}
}
===============================================

systemctl daemon-reload
systemctl restart docker

## Trying

docker pull xx.xx.xx.xx:5000/busybox:latest
docker pull busybox:latest

EOF
  )
  echo -e "$content"
}

function mirror_docker_help() {
  cat <<EOF

  Usage: ./ctl docker [OPTION...]

  Examples:
        ./ctl docker install # install docker registry
        ./ctl docker uninstall # uninstall docker registry
        ./ctl docker join # show trying
EOF
}

function mirror_docker_enable_requirements_task() {

  local cron_file=$(get_cron_file)

  if [ ! -e "$cron_file" ]; then
    touch $cron_file
    chmod 600 "$cron_file"
  fi

  local sync_flag=$(cat $cron_file | grep "$_PWD/ctl" | wc -l)

  if [ $sync_flag -eq 0 ]; then
    echo "0 1 * * 1 bash $PWD/ctl docker sync-images exec" >>$cron_file
  fi

}

function mirror_docker_enable_requirements_task() {
  local cron_file=$(get_cron_file)
  sed -i "\|$PWD/ctl docker sync-images exec|d" $cron_file
}

function mirror_docker_sync_images() {

  requirements=$(cat requirements.txt)

  for image in "${requirements[@]}"; do
    docker pull image
    docker tag $image 127.0.0.1:15000/$image
    docker push 127.0.0.1:15000/$image
  done

}
